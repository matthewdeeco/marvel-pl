/* The following code was generated by JFlex 1.4.1 on 9/29/13 5:45 PM */

/*
 * Generated on 9/29/13 5:45 PM
 */
package ide;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class MarvelTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\33\1\15"+
    "\1\17\1\1\1\33\1\33\1\7\1\35\1\35\1\50\1\23\1\33"+
    "\1\23\1\21\1\36\1\4\3\4\4\6\2\3\1\42\1\33\1\51"+
    "\1\52\1\51\1\33\1\34\6\5\24\1\1\35\1\11\1\35\1\16"+
    "\1\2\1\0\1\27\1\14\1\46\1\44\1\22\1\26\1\47\1\37"+
    "\1\41\2\1\1\30\1\1\1\13\1\45\1\40\1\1\1\25\1\31"+
    "\1\24\1\12\1\1\1\43\3\1\1\32\1\16\1\32\1\33\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\2\1\1\10\4\1\1\11\5\1\1\10\1\12"+
    "\1\13\3\12\1\0\1\14\1\0\1\14\1\3\1\15"+
    "\1\0\1\3\1\1\2\5\1\16\1\17\12\1\1\20"+
    "\2\1\5\0\1\17\1\0\1\3\1\21\2\3\1\15"+
    "\1\3\1\1\1\5\1\22\1\5\7\1\1\23\3\1"+
    "\5\0\1\3\1\5\1\1\1\24\3\1\2\0\1\25"+
    "\1\0\1\3\1\5\1\1\3\0\1\3\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\126\0\u0102"+
    "\0\u012d\0\126\0\u0158\0\u0183\0\u01ae\0\126\0\u01d9\0\u0204"+
    "\0\u022f\0\u025a\0\126\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331"+
    "\0\u035c\0\u0387\0\126\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e"+
    "\0\u0183\0\u0489\0\u04b4\0\126\0\u04df\0\u050a\0\u0535\0\u0560"+
    "\0\u058b\0\126\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d"+
    "\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\201\0\u078f\0\u07ba"+
    "\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912"+
    "\0\126\0\u093d\0\u0968\0\u04df\0\u0993\0\u09be\0\u09e9\0\126"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41"+
    "\0\201\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e"+
    "\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\201\0\u0d45\0\u0d70\0\u0d9b"+
    "\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3"+
    "\0\u0e1c\0\u0f1e\0\u0f49\0\u0f74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\2\5\1\4\1\5\1\6\1\7\1\3"+
    "\2\4\1\10\1\11\1\3\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\4\1\22\1\23\2\3"+
    "\1\23\1\16\1\4\1\24\1\25\1\3\1\26\1\27"+
    "\1\4\1\30\1\4\1\16\1\31\1\16\10\32\1\33"+
    "\15\32\1\34\10\32\1\35\3\32\1\36\7\32\54\0"+
    "\6\4\2\0\1\37\3\4\5\0\1\4\1\0\6\4"+
    "\5\0\3\4\1\0\5\4\3\0\3\40\2\5\1\40"+
    "\1\5\2\0\4\40\2\0\1\40\1\0\1\41\1\42"+
    "\1\0\6\40\2\0\1\40\2\0\3\40\1\0\5\40"+
    "\3\0\7\43\1\44\1\45\1\46\41\43\1\0\6\4"+
    "\2\0\1\37\3\4\5\0\1\4\1\0\6\4\5\0"+
    "\3\4\1\0\2\4\1\47\2\4\3\0\10\11\1\50"+
    "\1\51\3\11\1\52\35\11\20\0\1\13\35\0\2\53"+
    "\1\0\1\53\45\0\6\4\2\0\1\37\1\4\1\54"+
    "\1\4\5\0\1\4\1\0\4\4\1\55\1\4\5\0"+
    "\3\4\1\0\5\4\4\0\6\4\2\0\1\37\3\4"+
    "\5\0\1\4\1\0\1\4\1\56\4\4\5\0\1\57"+
    "\2\4\1\0\5\4\4\0\6\4\2\0\1\37\3\4"+
    "\5\0\1\60\1\0\6\4\5\0\3\4\1\0\5\4"+
    "\4\0\6\4\2\0\1\37\3\4\5\0\1\4\1\0"+
    "\3\4\1\61\2\4\5\0\3\4\1\0\5\4\4\0"+
    "\6\4\2\0\1\37\3\4\5\0\1\4\1\0\1\62"+
    "\5\4\5\0\3\4\1\0\5\4\4\0\6\4\2\0"+
    "\1\37\1\63\2\4\5\0\1\4\1\0\1\4\1\64"+
    "\4\4\5\0\3\4\1\0\5\4\4\0\6\4\2\0"+
    "\1\37\1\4\1\65\1\4\5\0\1\4\1\0\2\4"+
    "\1\66\3\4\5\0\3\4\1\0\5\4\4\0\6\4"+
    "\2\0\1\37\3\4\5\0\1\4\1\0\6\4\5\0"+
    "\1\67\2\4\1\0\5\4\4\0\6\4\2\0\1\37"+
    "\3\4\5\0\1\4\1\0\6\4\5\0\3\4\1\0"+
    "\2\4\1\66\2\4\4\0\6\4\2\0\1\37\3\4"+
    "\5\0\1\4\1\0\6\4\5\0\1\70\2\4\1\0"+
    "\5\4\55\0\1\16\10\32\1\0\15\32\1\0\10\32"+
    "\1\0\3\32\1\0\7\32\24\0\1\71\14\0\1\72"+
    "\35\0\1\73\71\0\1\74\21\0\1\75\40\0\7\40"+
    "\2\0\4\40\2\0\1\40\2\0\1\40\1\0\6\40"+
    "\2\0\1\40\2\0\3\40\1\0\5\40\3\0\3\40"+
    "\2\76\1\40\1\76\2\0\4\40\2\0\1\40\2\0"+
    "\1\40\1\77\6\40\2\0\1\40\2\0\3\40\1\0"+
    "\5\40\3\0\7\100\1\101\1\0\42\100\7\0\1\101"+
    "\43\0\4\100\1\102\1\100\1\103\1\104\1\0\1\43"+
    "\1\105\3\43\6\100\3\43\24\100\1\0\6\4\2\0"+
    "\1\37\3\4\5\0\1\4\1\0\6\4\5\0\3\4"+
    "\1\0\2\4\1\106\2\4\3\0\11\50\1\107\3\50"+
    "\1\110\41\50\1\11\1\50\2\11\1\0\1\11\1\111"+
    "\3\11\6\50\3\11\24\50\3\40\2\53\1\40\1\53"+
    "\2\0\4\40\2\0\1\40\2\0\1\42\1\0\6\40"+
    "\2\0\1\40\2\0\3\40\1\0\5\40\4\0\6\4"+
    "\2\0\1\37\3\4\5\0\1\4\1\0\6\4\5\0"+
    "\3\4\1\0\1\4\1\66\3\4\4\0\6\4\2\0"+
    "\1\37\3\4\5\0\1\4\1\0\5\4\1\112\5\0"+
    "\3\4\1\0\5\4\4\0\6\4\2\0\1\37\1\113"+
    "\2\4\5\0\1\4\1\0\6\4\5\0\3\4\1\0"+
    "\5\4\4\0\6\4\2\0\1\37\3\4\5\0\1\114"+
    "\1\0\6\4\5\0\3\4\1\0\5\4\4\0\6\4"+
    "\2\0\1\37\3\4\5\0\1\4\1\0\3\4\1\106"+
    "\2\4\5\0\3\4\1\0\5\4\4\0\6\4\2\0"+
    "\1\37\3\4\5\0\1\4\1\0\4\4\1\115\1\4"+
    "\5\0\3\4\1\0\5\4\4\0\6\4\2\0\1\37"+
    "\3\4\5\0\1\4\1\0\1\4\1\116\4\4\5\0"+
    "\3\4\1\0\5\4\4\0\6\4\2\0\1\37\3\4"+
    "\5\0\1\4\1\0\1\117\5\4\5\0\3\4\1\0"+
    "\5\4\4\0\6\4\2\0\1\37\3\4\5\0\1\4"+
    "\1\0\6\4\5\0\2\4\1\120\1\0\5\4\4\0"+
    "\6\4\2\0\1\37\3\4\5\0\1\4\1\0\1\121"+
    "\5\4\5\0\1\4\1\122\1\4\1\0\5\4\4\0"+
    "\6\4\2\0\1\37\3\4\5\0\1\4\1\0\6\4"+
    "\5\0\2\4\1\123\1\0\5\4\4\0\6\4\2\0"+
    "\1\37\3\4\5\0\1\4\1\0\3\4\1\124\2\4"+
    "\5\0\3\4\1\0\5\4\43\0\1\125\42\0\1\126"+
    "\46\0\1\127\71\0\1\130\12\0\4\131\5\0\1\131"+
    "\5\0\1\131\3\0\2\131\14\0\1\131\1\0\1\131"+
    "\4\0\3\40\2\76\1\40\1\76\2\0\4\40\2\0"+
    "\1\40\2\0\1\40\1\0\6\40\2\0\1\40\2\0"+
    "\3\40\1\0\5\40\6\0\2\76\1\0\1\76\44\0"+
    "\7\100\1\44\1\0\46\100\1\103\1\100\1\103\1\101"+
    "\1\0\46\100\1\43\1\100\1\43\1\101\1\0\45\100"+
    "\4\132\1\44\1\0\3\100\1\132\5\100\1\132\3\100"+
    "\2\132\14\100\1\132\1\100\1\132\4\100\1\0\6\4"+
    "\2\0\1\37\3\4\5\0\1\4\1\0\4\4\1\121"+
    "\1\4\5\0\3\4\1\0\5\4\3\0\10\50\1\0"+
    "\45\50\4\133\2\50\1\107\2\50\1\133\1\110\4\50"+
    "\1\133\3\50\2\133\14\50\1\133\1\50\1\133\4\50"+
    "\1\0\6\4\2\0\1\37\3\4\5\0\1\66\1\0"+
    "\6\4\5\0\2\4\1\134\1\0\5\4\4\0\6\4"+
    "\2\0\1\37\3\4\5\0\1\135\1\0\6\4\5\0"+
    "\3\4\1\0\5\4\4\0\6\4\2\0\1\37\1\4"+
    "\1\66\1\4\5\0\1\4\1\0\6\4\5\0\3\4"+
    "\1\0\5\4\4\0\6\4\2\0\1\37\3\4\5\0"+
    "\1\4\1\0\5\4\1\113\5\0\3\4\1\0\5\4"+
    "\4\0\6\4\2\0\1\37\3\4\5\0\1\4\1\0"+
    "\6\4\5\0\2\4\1\136\1\0\5\4\4\0\6\4"+
    "\2\0\1\37\3\4\5\0\1\4\1\0\5\4\1\66"+
    "\5\0\3\4\1\0\5\4\4\0\6\4\2\0\1\37"+
    "\1\4\1\137\1\4\5\0\1\4\1\0\6\4\5\0"+
    "\3\4\1\0\5\4\4\0\6\4\2\0\1\37\1\137"+
    "\2\4\5\0\1\4\1\0\6\4\5\0\3\4\1\0"+
    "\5\4\4\0\6\4\2\0\1\37\3\4\5\0\1\4"+
    "\1\0\4\4\1\140\1\4\5\0\3\4\1\0\5\4"+
    "\4\0\6\4\2\0\1\37\3\4\5\0\1\4\1\0"+
    "\1\4\1\121\4\4\5\0\3\4\1\0\5\4\45\0"+
    "\1\141\32\0\1\125\70\0\1\142\33\0\1\143\34\0"+
    "\4\144\5\0\1\144\5\0\1\144\3\0\2\144\14\0"+
    "\1\144\1\0\1\144\4\0\3\100\4\145\1\44\1\0"+
    "\3\100\1\145\5\100\1\145\3\100\2\145\14\100\1\145"+
    "\1\100\1\145\4\100\3\50\4\146\2\50\1\107\2\50"+
    "\1\146\1\110\4\50\1\146\3\50\2\146\14\50\1\146"+
    "\1\50\1\146\4\50\1\0\6\4\2\0\1\37\3\4"+
    "\5\0\1\4\1\0\2\4\1\66\3\4\5\0\3\4"+
    "\1\0\5\4\4\0\6\4\2\0\1\37\1\4\1\147"+
    "\1\4\5\0\1\4\1\0\6\4\5\0\3\4\1\0"+
    "\5\4\4\0\6\4\2\0\1\37\3\4\5\0\1\4"+
    "\1\0\1\66\5\4\5\0\3\4\1\0\5\4\4\0"+
    "\6\4\2\0\1\37\3\4\5\0\1\66\1\0\6\4"+
    "\5\0\3\4\1\0\5\4\41\0\1\150\45\0\1\125"+
    "\10\0\1\141\11\0\1\143\1\151\4\143\1\151\2\0"+
    "\3\143\2\0\1\151\1\0\1\151\1\143\1\151\6\143"+
    "\1\0\3\151\4\143\1\151\5\143\1\151\1\0\1\151"+
    "\3\0\4\152\5\0\1\152\5\0\1\152\3\0\2\152"+
    "\14\0\1\152\1\0\1\152\4\0\3\100\4\153\1\44"+
    "\1\0\3\100\1\153\5\100\1\153\3\100\2\153\14\100"+
    "\1\153\1\100\1\153\4\100\3\50\4\154\2\50\1\107"+
    "\2\50\1\154\1\110\4\50\1\154\3\50\2\154\14\50"+
    "\1\154\1\50\1\154\4\50\1\0\6\4\2\0\1\37"+
    "\3\4\5\0\1\4\1\0\6\4\5\0\3\4\1\0"+
    "\4\4\1\121\41\0\1\143\17\0\4\4\5\0\1\4"+
    "\5\0\1\4\3\0\2\4\14\0\1\4\1\0\1\4"+
    "\4\0\3\100\4\43\1\44\1\0\3\100\1\43\5\100"+
    "\1\43\3\100\2\43\14\100\1\43\1\100\1\43\4\100"+
    "\3\50\4\11\2\50\1\107\2\50\1\11\1\110\4\50"+
    "\1\11\3\50\2\11\14\50\1\11\1\50\1\11\4\50";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3999];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\2\1\1\11\3\1\1\11"+
    "\4\1\1\11\7\1\1\11\3\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\0\4\1\1\11\16\1\5\0\1\1"+
    "\1\0\1\1\1\11\6\1\1\11\14\1\5\0\7\1"+
    "\2\0\1\1\1\0\3\1\3\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public MarvelTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			/* No multi-line comments */
			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return null;
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MarvelTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public MarvelTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 22: break;
        case 17: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 23: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 24: break;
        case 18: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 25: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 26: break;
        case 16: 
          { addToken(Token.RESERVED_WORD);
          }
        case 27: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 28: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 29: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 30: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 31: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 32: break;
        case 19: 
          { addToken(Token.DATA_TYPE);
          }
        case 33: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 34: break;
        case 20: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 35: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 36: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 37: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 38: break;
        case 6: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 39: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 40: break;
        case 8: 
          { addToken(Token.OPERATOR);
          }
        case 41: break;
        case 10: 
          { 
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 109: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 110: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
